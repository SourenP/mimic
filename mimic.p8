pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

-- settings
slow_speed = 14 -- the larger the slower the npcs move

-- constants
tick = 0
actors = {}

-- sprites
player_spr = 3
turtle_spr = 5
worm_spr = 21
butter_spr = 23

-- start positions
player_pos = {10, 10}
turtle_pos = {10, 3}
worm_pos = {3, 14}
butter_pos = {10, 12}

-- npc patterns
turtle_pattern = {
    {-1, 0}, {-1, 0}, {-1, 0},
    {1, 0}, {1, 0}, {1, 0}}
worm_pattern = {
    {1, 0}, {1, 0}, {1, 0},
    {0, -1}, {0, -1}, {0, -1},
    {-1, 0}, {-1, 0}, {-1, 0},
    {0, 1}, {0, 1}, {0, 1}}
butter_pattern = {
    {0, 1}, {0, 1},
    {0, -1}, {0, -1}}

-- player pattern
player_pattern = {}
player_pattern_i = 0
player_pattern_size = 13 -- must be 1 longer than the max npc pattern length

function make_actor(x, y, spr_n, pattern)
    a={}
    a.x = x
    a.y = y
    a.dx = 0
    a.dy = 0
    a.spr = spr_n
    a.pattern = pattern

    -- animation
    a.frame = 0
    a.t = 0
    a.frames = 2
    a.flip_x = false

    add(actors, a)
    return a
end

function valid_position(x, y, a)
    if x < 0 or x > 15 or y < 0 or y > 15 then
        return false
    else
        -- todo: add collision check
        return true
    end
end

function move_actor(a)
    local is_player = (#a.pattern == 0)

    if not is_player then 
        -- apply npc pattern
        if a.dx == 0 and a.dy == 0 then
            if tick % slow_speed == 0 then
                local move = a.pattern[(a.t % #a.pattern) + 1]
                a.dx = move[1]
                a.dy = move[2]
                a.t += 1
            end
        end
    end

    if valid_position(a.x + a.dx, a.y + a.dy) then
        a.x += a.dx
        a.y += a.dy

        if is_player and (a.dx ~=0 or a.dy ~= 0) then 
            -- save player pattern
            player_pattern_i += 1        
            if player_pattern_i > player_pattern_size then
                player_pattern_i = 1
            end
            player_pattern[player_pattern_i][1] = a.dx;
            player_pattern[player_pattern_i][2] = a.dy;
        end
    end

    -- animation
    if a.dx ~= 0 or a.dy ~= 0 then
        a.frame += 1
        a.frame %= a.frames
        a.flip_x = a.dx > 0
    end

    a.dx = 0
    a.dy = 0
end

function draw_actor(a)
    spr(a.spr + a.frame, a.x*8, a.y*8, 1, 1, a.flip_x)
end

function player_input()
    if (btnp(0)) pl.dx = -1
    if (btnp(1)) pl.dx = 1
    if (btnp(2)) pl.dy = -1
    if (btnp(3)) pl.dy = 1
end

function pattern_match()
    for a in all(actors) do
        local is_player = (#a.pattern == 0)
        if not is_player then
            if contains_pattern(player_pattern, a.pattern) then
                pl.spr = a.spr
            end
        end
    end
end

function contains_pattern(sup_pattern, sub_pattern)
    local sup_len = #sup_pattern
    local sub_len = #sub_pattern
    for i=1,sup_len do
        local out = true
        for j=1,sub_len do
            local sup_move = sup_pattern[((i+j-1) % sup_len) + 1]
            local sub_move = sub_pattern[j]
            out = out and (sup_move[1] == sub_move[1] and sup_move[2] == sub_move[2]) 
        end
        if out then return true end
    end
    return false
end

function find_player(spr_n)
    for i=0,16 do
		for j=0,16 do
			if mget(i,j) == spr_n then
                -- todo: erase player from map if possible
                -- or find another solution for agent positions
                -- maybe a second layer of the map or define in code?
				return i, j
			end
		end
	end
end

function init_player_pattern() 
    for i=0,player_pattern_size do
        add(player_pattern, {0,0})
    end
end

function _init()
	-- local x, y = find_player(player_spr)
    pl = make_actor(player_pos[1], player_pos[2], player_spr, {}) -- player
    init_player_pattern()
    make_actor(turtle_pos[1], turtle_pos[2], turtle_spr, turtle_pattern)
    make_actor(worm_pos[1], worm_pos[2], worm_spr, worm_pattern)
    make_actor(butter_pos[1], butter_pos[2], butter_spr, butter_pattern)
end

function _update()
    player_input()
    foreach(actors, move_actor)
    pattern_match()
    tick += 1
end

function _draw()
    cls()
    map(0,0,0,0,16,16)
    foreach(actors, draw_actor)
end

__gfx__
00000000000000000000000000000000000000000000b00b00b0000b00000000000000000000000000000000cccccccccccccccc000000000000000000000000
00000000080800000000a0000888888008888880000033300003333000099000009990000003300000000000cccc77ccccccc77c000000000000000000000000
0070070088888000000aa90008f8f8800888888000033933003393330099990909999909000b300000055500c77cccc7c7cc7ccc000000000000000000000000
000770008888800000aaa9900888888008f8f8800bb33393bb33393309d999999d99999900333300005565007cc7cc7ccc77cccc000000000000000000000000
00077000088800000009990008888880088888800bb33393bb333933099999999999999900333b0005555550cccc77cccccccccc000000000000000000000000
00700700008000000000900008888880088888800003393300339333009999090999990903b3333005555650c7cccccccccc77c7000000000000000000000000
0000000000000000000000000888888008888880000033300003333000099000009990000333333005655555cc7cc77c77cccc7c000000000000000000000000
00000000000000000000000000000000000000000000b00b00b0000b00000000000000000004400005555555cccccccccccccccc000000000000000000000000
dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccc00000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000aaa00000000000000000000000000cccccccc00000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000ee000000aaaaa000aaaaa00000000000000000cccccccc00000000000000000000000000000000
dddddddd00000000000000000000000000000000e0000ee00e00e00e090aaa00090aaa000000000000000000cccccccc00000000000000000000000000000000
dddddddd000000000000000000000000000000000e00e00ee0000ee000999990009999900000000000000000cccccccc00000000000000000000000000000000
dddddddd0000000000000000000000000000000000ee000000000000090aaa00090aaa000000000000000000cccccccc00000000000000000000000000000000
dddddddd00000000000000000000000000000000000000000000000000aaaaa000aaaaa00000000000000000cccccccc00000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000aaa00000000000000000000000000cccccccc00000000000000000000000000000000
__map__
0909090909090909090909090909090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0909000000000002000000000000090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0909000000000000000000000000090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0909000000000000000000000009090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
090a0a0a000000000000000000090a0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
090a0a0000000000000000000009090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0900000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0909090909090909090909090909090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
